/*
    Media queries mixins 
    Will in the future change the syntax in the range with a less obsolete version
    ex: @media screen and ( map-get($breakpoints, mobile) <= width <=  map-get($breakpoints, tablet) ){...}
    We can also go a little further by adding custom media queries
    ex: 
        @custom-media --tablet-range (768px <= width <= 992px);
        @mixin desktop-only {
            @media --tablet-range {
                @content;
            }
        }


       @custom-media: As of 26/01/2023, this custom media query is still in development
       
       width <= ...: This range syntax is very well supported across all browsers at the exception of Safari
*/

@mixin mobile-only {
    @media screen and (width <=768px) {
        @content;
    }
}

@mixin tablet-only {
    @media screen and (768px <=width <=992px) {
        @content;
    }
}

@mixin laptop-only {
    @media screen and (992px <=width <=1150px) {
        @content;
    }
}

@mixin desktop-small-only {
    @media screen and (1150px <=width <=1475px) {
        @content;
    }
}

@mixin desktop-only {
    @media screen and (width>=1475px) {
        @content;
    }
}


//Flex mixins
@mixin center-flex($gap: 0px) {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    gap: $gap;
}

@mixin center-flex-column($gap: 0px) {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: $gap;
}


//Grid mixins
@mixin grid($rows: auto-fill, $columns: auto-fill, $gap: 0px) {
    display: grid;
    grid-template-rows: repeat($rows, 1fr);
    grid-template-columns: repeat($columns, 1fr);
    gap: $gap;
}

//Center in the middle query
@mixin absolute-center {
    position: absolute;
    left: 50%;
    top: 50%;
    translate: -50% -50%;
}

//Mixin to make the image avoid deforming itself when applying CSS propeties
@mixin fit-image {
    object-fit: cover;
    object-position: center;
}

//Mixin to make the image take the set width and height without deforming it but without filling the entire container 
//And also to remove any background in the image itself thanks to the 2nd property
@mixin contain-image {
    object-fit: contain;
    mix-blend-mode: color-burn;
}


//Mixin to make a single line ellipsis for our text
//âš  The parent may need a "overflow" set to "hidden" in order for it to properly work
@mixin text-ellipsis-effect {
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
}